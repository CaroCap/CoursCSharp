/*
Deployment script for HolidayRental.DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HolidayRental.DB"
:setvar DefaultFilePrefix "HolidayRental.DB"
:setvar DefaultDataPath "C:\Users\c.cap\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\c.cap\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Commentaire]...';


GO
CREATE TABLE [dbo].[Commentaire] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [location_ID]     INT            NOT NULL,
    [comm]            NVARCHAR (500) NOT NULL,
    [score]           INT            NOT NULL,
    [dateCommentaire] DATE           NOT NULL,
    [valide]          BIT            NOT NULL,
    CONSTRAINT [PK_Commentaire] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Location]...';


GO
CREATE TABLE [dbo].[Location] (
    [Id]          INT  IDENTITY (1, 1) NOT NULL,
    [user_ID]     INT  NOT NULL,
    [logement_ID] INT  NOT NULL,
    [dateDebut]   DATE NOT NULL,
    [dateFin]     DATE NOT NULL,
    [valide]      BIT  NOT NULL,
    CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Logement]...';


GO
CREATE TABLE [dbo].[Logement] (
    [Id]                   INT            IDENTITY (1, 1) NOT NULL,
    [titre]                NVARCHAR (64)  NOT NULL,
    [resum]                NVARCHAR (200) NOT NULL,
    [description]          NVARCHAR (MAX) NOT NULL,
    [pays]                 NVARCHAR (64)  NOT NULL,
    [ville]                VARCHAR (64)   NOT NULL,
    [rue]                  NVARCHAR (150) NOT NULL,
    [numero]               VARCHAR (10)   NOT NULL,
    [CP]                   VARCHAR (20)   NOT NULL,
    [photo]                NVARCHAR (150) NOT NULL,
    [capacite]             INT            NULL,
    [assurance]            BIT            NULL,
    [actif]                BIT            NULL,
    [dateLastModification] DATETIME       NULL,
    [user_ID]              INT            NOT NULL,
    CONSTRAINT [PK_Logement] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Option]...';


GO
CREATE TABLE [dbo].[Option] (
    [Id]            INT IDENTITY (1, 1) NOT NULL,
    [logement_ID]   INT NOT NULL,
    [typeOption_ID] INT NOT NULL,
    [nombre]        INT NULL,
    CONSTRAINT [PK_Option] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TypeOption]...';


GO
CREATE TABLE [dbo].[TypeOption] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [type] NVARCHAR (64) NOT NULL,
    CONSTRAINT [PK_TypeOption] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [nom]      NVARCHAR (64)  NOT NULL,
    [prenom]   NVARCHAR (64)  NOT NULL,
    [email]    NVARCHAR (250) NOT NULL,
    [pays]     NVARCHAR (64)  NOT NULL,
    [tel]      VARCHAR (20)   NOT NULL,
    [password] NVARCHAR (64)  NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Commentaire]...';


GO
ALTER TABLE [dbo].[Commentaire]
    ADD DEFAULT CURRENT_TIMESTAMP FOR [dateCommentaire];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Commentaire]...';


GO
ALTER TABLE [dbo].[Commentaire]
    ADD DEFAULT 0 FOR [valide];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Location]...';


GO
ALTER TABLE [dbo].[Location]
    ADD DEFAULT 0 FOR [valide];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [capacite];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [assurance];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT 1 FOR [actif];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Logement]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD DEFAULT CURRENT_TIMESTAMP FOR [dateLastModification];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Option]...';


GO
ALTER TABLE [dbo].[Option]
    ADD DEFAULT 1 FOR [nombre];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Commentaire_User]...';


GO
ALTER TABLE [dbo].[Commentaire]
    ADD CONSTRAINT [FK_Commentaire_User] FOREIGN KEY ([location_ID]) REFERENCES [dbo].[Location] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Location_User]...';


GO
ALTER TABLE [dbo].[Location]
    ADD CONSTRAINT [FK_Location_User] FOREIGN KEY ([user_ID]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Location_Logement]...';


GO
ALTER TABLE [dbo].[Location]
    ADD CONSTRAINT [FK_Location_Logement] FOREIGN KEY ([logement_ID]) REFERENCES [dbo].[Logement] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Logement_User]...';


GO
ALTER TABLE [dbo].[Logement]
    ADD CONSTRAINT [FK_Logement_User] FOREIGN KEY ([user_ID]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Option_TypeOption]...';


GO
ALTER TABLE [dbo].[Option]
    ADD CONSTRAINT [FK_Option_TypeOption] FOREIGN KEY ([typeOption_ID]) REFERENCES [dbo].[TypeOption] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Option_Logement]...';


GO
ALTER TABLE [dbo].[Option]
    ADD CONSTRAINT [FK_Option_Logement] FOREIGN KEY ([logement_ID]) REFERENCES [dbo].[Logement] ([Id]);


GO
PRINT N'Creating Check Constraint [dbo].[ck_tel]...';


GO
ALTER TABLE [dbo].[User]
    ADD CONSTRAINT [ck_tel] CHECK (tel LIKE ('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]') OR tel LIKE ('[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'));


GO
PRINT N'Creating View [dbo].[BestComments]...';


GO
CREATE VIEW [dbo].[BestComments]
	(id, photo, titre, resum, pays, capacite)
	AS SELECT Logement.Id, Logement.photo, Logement.titre, Logement.resum, Logement.pays, Logement.capacite
	FROM Logement INNER JOIN
        Location ON Logement.Id = Location.logement_ID INNER JOIN
        Commentaire ON Location.Id = Commentaire.location_ID
	WHERE (Commentaire.score > 6)

	--Les biens échangés ayant la meilleure réputation (avis > 6/10)
	--SELECT photo,titre, resum, pays, capacite FROM [Logement, Commentaire]
	--WHERE Commentaire.score > 6
GO
PRINT N'Creating View [dbo].[GroupByCountry]...';


GO
CREATE VIEW [dbo].[GroupByCountry]
(id, photo, titre, resum, pays, capacite)
	AS SELECT Logement.Id, Logement.photo, Logement.titre, Logement.resum, Logement.pays, Logement.capacite
	FROM [Logement]
	ORDER BY [pays] OFFSET 0 ROWS


	--GROUP BY [pays]
	--ORDER BY COUNT(Logement.Id) OFFSET 0;


-- Les biens groupés par pays
--	SELECT column_name(s)
--	FROM table_name
--	WHERE condition
--	GROUP BY column_name(s)
--	ORDER BY column_name(s);
GO
PRINT N'Creating View [dbo].[LastLogementAdded]...';


GO
CREATE VIEW [dbo].[LastLogementAdded]
(id, photo, titre, resum, pays, capacite)
	AS SELECT TOP 5 id, photo, titre, resum, pays, capacite FROM [Logement] ORDER BY id DESC

--	Les 5 derniers biens ajoutés en échanges
--	Le résultat de la recherche sera présenté sous forme d’une liste reprenant :
--- La photo 
--- Le titre
--- La description courte
--- Le pays
--- Le nombre de personne
GO
PRINT N'Creating Procedure [dbo].[SP_DetailLogement]...';


GO
--Récupérer les informations complètes d’un bien à partir de son id

CREATE PROCEDURE [dbo].[SP_DetailLogement]
	@logementID int
AS
	SELECT [Id], [titre], [resum], [description], [pays], [ville], [rue], [numero], [CP], [photo], [capacite], [assurance], [actif], [dateLastModification], [user_ID] FROM [Logement] WHERE Id = @logementID
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[SP_dispoLogement]...';


GO
-- Récupérer les biens disponibles entre deux dates

CREATE PROCEDURE [dbo].[SP_dispoLogement]
	@dateBegin date,
	@dateEnd date
AS SELECT Logement.Id, Logement.photo, Logement.titre, Logement.resum, Logement.pays, Logement.capacite
	FROM Logement INNER JOIN
        Location ON Logement.Id = Location.logement_ID
	WHERE ( @dateBegin > Location.dateFin) 
		OR ( @dateBegin < Location.dateDebut AND @dateEnd < Location.dateDebut )
RETURN 0
GO
--/*
--Post-Deployment Script Template							
----------------------------------------------------------------------------------------
-- This file contains SQL statements that will be appended to the build script.		
-- Use SQLCMD syntax to include a file in the post-deployment script.			
-- Example:      :r .\myfile.sql								
-- Use SQLCMD syntax to reference a variable in the post-deployment script.		
-- Example:      :setvar TableName MyTable							
--               SELECT * FROM [$(TableName)]					
----------------------------------------------------------------------------------------
--*/

--INSERT INTO [TypeOption] ([type]) 
--                        VALUES ('Salle de bain'),
--                                ('WC'),
--                                ('Jardin'),
--                                ('Piscine'),
--                                ('Machine à laver'),
--                                ('Internet'),
--                                ('Animaux admis')


--INSERT INTO [User] ([nom], [prenom], [email], [pays], [tel], [password]) 
--                                        VALUES ('Cap','Caroline', 'c.cap@interface3.be', 'Belgique', '0473300830', 'Test1234='),
--                                            ('Decarpentrie','Alexi', 'a.decarpentrie@interface3.be', 'Belgique', '0473300830', 'Test1234='),
--                                            ('Deletaille','Christine', 'c.deletaille@hotmail.com', 'Belgique', '0478926613', 'Test1234='),
--                                            ('Cap','Pierre', 'p.cap@interface3.be', 'Belgique', '0475369366', 'Test1234=');


--INSERT INTO [Logement] ([titre], [resum], [description], [pays], [ville], [rue], [numero], [CP], [photo], [capacite], [assurance], [user_ID]) 
--                                        VALUES ('Jolie Maison Bleue','Jolie petite maison en bord de mer', 'bla blabl bla TEST', 'Italie', 'La Spezia', 'Via Lunara', '6', 'SP1190', 'italie.png', 4, 1, 3),
--                                                ('Chouette appart','Appartement bien situé à Bruxelles', 'TEST bla blabl bla TEST TEST', 'Belgique', 'Bruxelles', 'rue Marconi', '56', '1190', 'imarconi.png', 2, 0, 1),
--                                                ('Villa Grandiose','Grande Villa avec piscine', 'TEST BLABLABLA bla blabl bla TEST', 'Italie', 'Florence', 'Via de Rome', '18', 'FI1190', 'florence.jpg', 8, 1, 1);


--INSERT INTO [Location] ([user_ID], [logement_ID], [dateDebut], [dateFin], [valide]) 
--                                        VALUES (2, 1, '2021-12-15', '2021-12-15', 1),
--                                                (4, 3, '2022-12-14', '2023-12-26', 1),
--                                                (1, 1, '2022-12-15', '2023-12-27', 1),
--                                                (1, 3, '2022-08-15', '2023-08-27', 1),
--                                                (2, 2, '2023-01-15', '2023-01-30', 1),
--                                                (3, 2, '2023-12-15', '2023-12-27', 1),
--                                                (4, 1, '2023-03-10', '2023-03-15', 1),
--                                                (4, 1, '2022-11-02', '2023-11-08', 0);


--INSERT INTO [Option] ([logement_ID], [typeOption_ID], [nombre]) 
--                                        VALUES (1, 1, 2),
--                                                (1, 2, 3),
--                                                (1, 3, 1),
--                                                (1, 4, 1),
--                                                (1, 5, 1),
--                                                (1, 6, 1),
--                                                (1, 7, 0),
--                                                (2, 1, 1),
--                                                (2, 2, 1),
--                                                (2, 3, 0),
--                                                (2, 4, 0),
--                                                (2, 5, 1),
--                                                (2, 6, 1),
--                                                (2, 7, 1),
--                                                (3, 1, 3),
--                                                (3, 2, 2),
--                                                (3, 3, 1),
--                                                (3, 4, 2),
--                                                (3, 5, 2);

--INSERT INTO [Commentaire] ([location_ID], [comm], [score], [dateCommentaire], [valide]) 
--                                        VALUES (1, 'blabloablabla com com com', 8, '2021-12-15', 1),
--                                                (1, 'TEST COM blabloablabla com com com', 6);


---- On peut utiliser les procédures stockées pour insérer un film
----EXEC SP_Film_Insert @titre='Jurassic Park', @date='1993-06-16'
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
